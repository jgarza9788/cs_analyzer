import os,sys,time,re
import pandas as pd
from Config import Config

from multiprocessing import Pool

DIR = os.path.dirname(os.path.realpath(__file__))

config = Config()

def is_cs(c_file):
    extension = c_file.split(".")[-1]

    if extension == "cs":
        return True
    else:   
        return False

def get_lines(c_file):
    try:
        with open(c_file, 'r') as f:
            return f.readlines()
    except:
        return []

def get_end_of_section(lines,line_number):

    num = 0
    result = 0
    function_list = []

    for index,line in enumerate(lines):
        line = line.strip()

        if index == 0  and line.startswith("namespace"):
            is_namespace = True

        if line.startswith("{"):
            num += 1
        elif line.startswith("}"):
            num -= 1

        if num == 0 and index > 1:
            result = index + line_number
            break

    return result

def get_function_list(lines):
    result = []

    for line in lines:
        line = line.strip()

        if re.match(r'(public|private|protected)',line):
            result.append(line)

    return result


def analyze_file(fd):
    result = []

    lines = get_lines(fd["full_path"])

    namespace = ""
    ns_sted = [None,None]

    _class = ""
    cl_sted = [None,None]
    # cl_index = 0

    full_string = ' '.join(lines)
    if re.match(r'<auto-generated>',full_string):
        result.append(
            {
                "file": fd["file"],
                "full_path": fd["full_path"],
                "type": "auto-generated file",
            }
            )
        return result

    for index,line in enumerate(lines):
        line = line.strip()

        if line.startswith("namespace"):
            namespace = line.split(" ")[-1]
            ns_sted[0] = index
            ns_sted[1] = get_end_of_section(lines[index-1:],index)

            function_list = get_function_list(lines[ns_sted[0]:ns_sted[1]])

            result.append(
                {
                    "file": fd["file"],
                    "full_path": fd["full_path"],
                    "functions": function_list,
                    "type": "namespace",
                    "name": namespace,
                    "start_line": ns_sted[0],
                    "end_line": ns_sted[1],
                }
            )

        
        # if line.startswith("class"):
        # if 'class' in line:
        if re.match(r'(public|private|protected).class',line):
            # print(line)
            _class = line.split(" ")[-1]
            cl_sted[0] = index
            cl_sted[1] = get_end_of_section(lines[index-1:],index)

            function_list = get_function_list(lines[cl_sted[0]:cl_sted[1]])

            result.append(
                {

                    "file": fd["file"],
                    "full_path": fd["full_path"],
                    "functions": function_list,

                    "namespace": namespace,

                    "type": "class",
                    "name": _class,
                    "class_properties": line.split(" "),
                    "start_line": cl_sted[0],
                    "end_line": cl_sted[1],
                }
            )



    return result

def main():
    """
    main function
    """

    print("root: ",config.data["root"])

    # this will store our result
    result = []
    
    # a list of cs files
    cs_files = []

    # loop through everything and find all cs files
    for root,dirs,files in os.walk(config.data["root"]):
        pass
        # print(root,"\n",dirs,"\n",files)
        for file in files:
            current_file = os.path.join(root, file)
            # print(current_file)
            if is_cs(current_file):
                cs_files.append(
                    {
                        "file":file,
                        "full_path": current_file
                    }
                    )

    # print(*cs_files,sep='\n')

    pool = Pool()
    pool_result = pool.map(analyze_file, cs_files)

    for r in pool_result:
        try:
            result.append(r[0])
        except:
            pass

    df = pd.DataFrame(result)
    df.to_csv("result.csv")


if __name__ == '__main__':

    # l = [0,1,2,3,4,5,6,7,8,9]
    # print(l[3:7])

    main()